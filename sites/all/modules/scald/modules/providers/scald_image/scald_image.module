<?php

/**
 * @file
 * Scald Image is a Scald Atom Provider for images.
 */

/*******************************************************************************
 * SCALD HOOK IMPLEMENTATIONS
 */

/**
 * Implements hook_scald_atom_providers().
 */
function scald_image_scald_atom_providers() {
  return array(
    'image' => 'Image upload'
  );
  // This code will never be hit, but is necessary to mark the string
  // for translation on localize.d.o
  t('Image upload');
}

/**
 * Implements hook_scald_add_form().
 */
function scald_image_scald_add_form(&$form, &$form_state) {
  $form['file'] = array(
    '#type' => 'managed_file',
    '#title' => t('Image'),
    '#upload_location' => 'public://atoms/images/',
    '#upload_validators' => array('file_validate_extensions' => array('jpg jpeg png gif')),
  );
}

/**
 * Implements hook_scald_add_form_fill().
 */
function scald_image_scald_add_form_fill(&$atom, $form, $form_state) {
  $file = file_load($form_state['values']['file']);
  $atom->title = $file->filename;
  $atom->base_id = $file->fid;
  $atom->scald_thumbnail[LANGUAGE_NONE][0] = (array)$file;
}

/**
 * Implements hook_scald_transcoders().
 */
function scald_image_scald_transcoders() {
  $transcoders = array();
  foreach (image_styles() as $name => $style) {
    $transcoders['style-' . $name] = array(
      'title' => t('@style (Image style)', array('@style' => $name)),
      'description' => t('Use the Image style @style to prepare the image', array('@style' => $name)),
      'formats' => array(
        'image' => 'passthrough'
      )
    );
  }
  return $transcoders;
}

/**
 * Implements hook_scald_player().
 */
function scald_image_scald_player() {
  return array(
    'image_figure' => array(
      'name' => 'HTML5 Image player',
      'description' => 'The HTML5 player using figure/figcaption for all image atoms.',
      'type' => array('image'),
      'settings' => array(
        'classes' => '',
        'caption' => '[atom:title], by [atom:author]',
      ),
    ),
  );
}

/**
 * Implements hook_scald_player_settings_form().
 */
function scald_image_scald_player_settings_form($form, &$form_state) {
  $element = array();

  $element['classes'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS classes'),
    '#size' => 40,
    '#default_value' => $form['#scald']['player_settings']['classes'],
  );
  $element['caption'] = array(
    '#type' => 'textfield',
    '#title' => t('Text pattern used for caption'),
    '#size' => 40,
    '#default_value' => $form['#scald']['player_settings']['caption'],
  );

  return $element;
}

/**
 * Implements hook_scald_fetch().
 */
function scald_image_scald_fetch($atom, $type) {
  if ($type == 'atom') {
    $file = file_load($atom->base_id);
    $atom->base_entity = $file;
    $atom->file_source = $file->uri;
    $atom->thumbnail_source = $file->uri;
  }
}

/**
 * Implements hook_scald_prerender().
 */
function scald_image_scald_prerender($atom, $context, $options, $mode) {
  $config = scald_context_config_load($context);

  // Find out which transcoder is in use, and checks if it's
  // one of the transcoder provided by Scald Image.
  $style_name = NULL;
  if ($transcoder = $config->transcoder[$atom->type]['*']) {
    if (preg_match('/^style-(.*)$/', $transcoder, $match)) {
      $style_name = $match[1];
    }
  }

  if ($mode == 'transcoder') {
    if (empty($style_name)) {
      return;
    }

    $preset = image_style_load($style_name);
    if (!empty($atom->file_source)) {
      $atom->file_transcoded = image_style_path($preset['name'], $atom->file_source);
      $atom->rendered->file_transcoded_url = image_style_url($preset['name'], $atom->file_source);
    }
    if (!empty($atom->thumbnail_source)) {
      $atom->thumbnail_transcoded = image_style_path($preset['name'], $atom->thumbnail_source);
      $atom->rendered->thumbnail_transcoded_url = image_style_url($preset['name'], $atom->thumbnail_source);
    }
  }
  elseif ($mode == 'player') {
    $settings = $config->player[$atom->type]['settings'];
    $classes = array_merge(array('scald-atom', 'scald-atom-image'), explode(' ', check_plain($settings['classes'])));
    $caption = token_replace($settings['caption'], array('atom' => $atom));
    $atom->rendered->player = '
      <figure class="' . implode(' ', $classes) . '">
        <img src="' . $atom->rendered->file_transcoded_url . '" alt="" />
        <figcaption>' . $caption . '</figcaption>
      </figure>
    ';
  }
  elseif ($mode == 'atom') {
    if (!empty($style_name)) {
      $atom->rendered->player = theme('image_style', array('path' => $atom->file_source, 'style_name' => $style_name));
    }
    else {
      $path = empty($atom->rendered->file_transcoded_url) ? $atom->file_source : $atom->rendered->file_transcoded_url;
      $atom->rendered->player = theme('image', array('path' => $path));
    }
  }
}

/**
 * Implements hook_scald_update_atom().
 */
function scald_image_scald_update_atom($atom, $mode) {
  if ($mode == 'atom') {
    if ($atom->scald_thumbnail) {
      // The thumbnail field is also the base entity. We keep them in
      // synchronisation when user update that field.
      $atom->base_id = $atom->scald_thumbnail[LANGUAGE_NONE][0]['fid'];
    }
  }
}

