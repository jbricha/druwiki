<?php

/**
 * @file
 * Scald Audio is a Scald Atom Provider for audio files.
 */

/*******************************************************************************
 * SCALD HOOK IMPLEMENTATIONS
 */

/**
 * Implements hook_scald_atom_providers().
 */
function scald_audio_scald_atom_providers() {
  return array(
    'audio' => 'Upload Audio file'
  );
}

/**
 * Implements hook_scald_add_form().
 */
function scald_audio_scald_add_form(&$form, &$form_state) {
  $form['file'] = array(
    '#type' => 'managed_file',
    '#title' => 'Audio',
    '#upload_location' => 'public://atoms/audio/',
    '#upload_validators' => array('file_validate_extensions' => array('wav ogg mp3')),
  );
}


/**
 * Implements hook_scald_add_form_fill().
 */
function scald_audio_scald_add_form_fill(&$atom, $form, $form_state) {
  $dir_audio_thumb = 'public://atoms/audio/thumb';
  $file = file_load($form_state['values']['file']);
  $atom->base_id = $file->fid;
  $atom->file_source = $file->uri;
  $atom->data['audio_file'] = $file->uri;
  $atom->data['audio_id'] = $file->fid;
  $atom->title = $file->filename;

  if (file_prepare_directory($dir_audio_thumb, FILE_CREATE_DIRECTORY)) {
    if (module_exists('waudio_getid3') && $getid3 = _waudio_getid3_load()) {
      $filepath = drupal_realpath($file->uri);
      // get all id3 infos
      $ret = waudio_getid3_ret_infos($filepath, $getid3);
      $atom->title = isset($ret['tags']['title'])?$ret['tags']['title']:$file->filename;

      // Prefill the author
      $atom->scald_authors[LANGUAGE_NONE][0] = array(
        'tid' => 0,
        'taxonomy_term' => (object)(array('name' => isset($ret['tags']['artist'])?$ret['tags']['artist']:t('Unknown')))
      );

      // Prefill tags
      $atom->scald_tags[LANGUAGE_NONE][0] = array(
        'tid' => 0,  // Beware, this is not a real tid, it's just an index
        'taxonomy_term' => (object)(array('name' => isset($ret['tags']['genre'])?$ret['tags']['genre']:t('Unknown')))
      );

      $atom->data['artist'] = isset($ret['tags']['artist'])?$ret['tags']['artist']:'';
      $atom->data['title'] = isset($ret['tags']['title'])?$ret['tags']['title']:'';
      $atom->data['album'] = isset($ret['tags']['album'])?$ret['tags']['album']:'';
      $atom->data['track'] = isset($ret['tags']['track'])?$ret['tags']['track']:isset($ret['tags']['track_number'])?$ret['tags']['track_number']:'';
      $atom->data['year'] = isset($ret['tags']['year'])?$ret['tags']['year']:'';
      $atom->data['genre'] = isset($ret['tags']['genre'])?$ret['tags']['genre']:'';

      // If the MP3 includes a cover art, use it as the default thumbnail.
      if (isset($ret['images'][0]['data']) && $ret['images'][0]['data'] != '') {
        $extension = '.jpg';
        if ($ret['images'][0]['image_mime'] == 'image/png') {
          $extension = '.png';
        }
        elseif ($ret['images'][0]['image_mime'] == 'image/gif') {
          $extension = '.gif';
        }
        $dest = $dir_audio_thumb . '/' . $file->filename . $extension;
        $thumbnail = file_save_data($ret['images'][0]['data'], $dest);
        // Set the file status to temporary (image thumb)
        db_update('file_managed')
          ->condition('fid', $thumbnail->fid)
          ->fields(array('status' => 0))
          ->execute();

        $atom->scald_thumbnail[LANGUAGE_NONE][0] = (array)$thumbnail;
      }
    }
  }
}

/**
 * Implements hook_scald_fetch().
 */
function scald_audio_scald_fetch($atom, $type) {
  $file_items = field_get_items('scald_atom', $atom, 'scald_thumbnail');
  if (!empty($file_items)) {
    $file_item = current($file_items);
    if (file_exists($file_item['uri'])) {
      $atom->thumbnail_source = $file_item['uri'];
    }
  }
  $atom->file_source = $atom->data['audio_file'];
}

/**
 * Implements hook_scald_atom_insert().
 */
function scald_audio_scald_atom_insert($atom) {
  if ($atom->provider == 'scald_audio') {
    $file = file_load($atom->data['audio_id']);
    if ($file) {
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);
      file_usage_add($file, 'scald_audio', 'scald_atom', $atom->sid);
    }
  }
}

/**
 * Implements hook_scald_prerender().
 */
function scald_audio_scald_prerender($atom, $context, $options, $mode) {
  if ($mode == 'atom') {
    $atom->rendered->player = theme('scald_audio_player',
      array('vars' =>
        array(
          'atom'          => $atom,
          'audio_uri'     => $atom->file_source,
          'thumbnail'     => $atom->thumbnail_source,
        ),
      )
    );
  }
}


/**
 * Implements hook_theme().
 */
function scald_audio_theme() {
  return array(
    'scald_audio_player' => array(
      'variables' => array('vars' => NULL),
      'template' => 'scald_audio_player'
    )
  );
}
